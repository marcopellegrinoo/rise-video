# -*- coding: utf-8 -*-
"""RISE-st_cineca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z8437yf9E86nqu0UjznkT-7OtUbg4oJc

### ***Cineca***
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras import activations
from tensorflow.keras.callbacks import TensorBoard
from tensorflow.keras.models import load_model
from keras import activations
import numpy as np

"""
##### ***Data & Black-Box***

"""

# IMPORTO I DATI PER VOTTIGNASCO
import os

# Ottieni il percorso effettivo da una variabile d'ambiente
work_path = os.environ['WORK']  # Ottieni il valore della variabile d'ambiente WORK
v_test_OHE_path = os.path.join(work_path, "Water_Resources/rise-video/data/Vottignasco/Vottignasco_00425010001_test_month_OHE.npy")
v_test_image_path = os.path.join(work_path, "Water_Resources/rise-video/data/Vottignasco/Vottignasco_00425010001_test_normalized_image_sequences.npy")
v_test_target_dates_path = os.path.join(work_path, "Water_Resources/rise-video/data/Vottignasco/Vottignasco_00425010001_test_target_dates.npy")

# Carica l'array numpy dai file
vottingasco_test_OHE    = np.load(v_test_OHE_path)
vottignasco_test_image  = np.load(v_test_image_path)
vottignasco_test_dates  = np.load(v_test_target_dates_path)


print(len(vottignasco_test_dates))
print(len(vottignasco_test_image))
print(len(vottingasco_test_OHE))

#print(vottingasco_test_OHE[0], "\n")
#print(vottignasco_test_image[0][0], "\n")

# """##### ***Black Boxes***"""

import os
import tensorflow as tf
from keras.models import load_model

# Se vuoi abilitare il dropout a runtime
mc_dropout = True

# Definizione della classe personalizzata doprout_custom
class doprout_custom(tf.keras.layers.SpatialDropout1D):
    def call(self, inputs, training=None):
        if mc_dropout:
            return super().call(inputs, training=True)
        else:
            return super().call(inputs, training=False)

# Percorso della directory su Cineca
base_dir = os.path.join(os.environ['WORK'], "Water_Resources/rise-video/trained_models/seq2val/Vottignasco")
lstm_suffix = 'time_dist_LSTM'

vott_lstm_models = []

def extract_index(filename):
    """Funzione per estrarre l'indice finale dal nome del file."""
    return int(filename.split('_LSTM_')[-1].split('.')[0])

# Trova tutti i file .keras nella cartella e li aggiunge alla lista
for filename in os.listdir(base_dir):
    if lstm_suffix in filename and filename.endswith(".keras"):
        vott_lstm_models.append(os.path.join(base_dir, filename))

# Ordina i modelli in base all'indice finale
vott_lstm_models = sorted(vott_lstm_models, key=lambda x: extract_index(os.path.basename(x)))

# Lista per i modelli caricati
vott_lstm_models_loaded = []

for i, model_lstm_path in enumerate(vott_lstm_models[:10]):  # Prendo i primi 10 modelli ordinati
    #print(f"Caricamento del modello LSTM {i+1}: {model_lstm_path}")

    # Carico il modello con la classe custom
    model = load_model(model_lstm_path, custom_objects={"doprout_custom": doprout_custom})

    # Aggiungo il modello alla lista
    vott_lstm_models_loaded.append(model)

print(vott_lstm_models_loaded)

"""### ***RISE-st***

#### ***Generation Masks (3D): Uniform***
"""

# Masks Geeneration

from scipy.interpolate import RegularGridInterpolator

# Funzione per eseguire l'upsampling usando RegularGridInterpolator
def upsample_mask(mask, target_shape):
    # Crea la griglia di origine e destinazione
    original_shape = mask.shape
    x = np.linspace(0, original_shape[0] - 1, original_shape[0])
    y = np.linspace(0, original_shape[1] - 1, original_shape[1])
    z = np.linspace(0, original_shape[2] - 1, original_shape[2])

    # Crea una griglia per la destinazione (dimensione finale)
    target_x = np.linspace(0, original_shape[0] - 1, target_shape[0])
    target_y = np.linspace(0, original_shape[1] - 1, target_shape[1])
    target_z = np.linspace(0, original_shape[2] - 1, target_shape[2])

    # Crea l'interpolatore
    interpolator = RegularGridInterpolator((x, y, z), mask, method='linear', bounds_error=False, fill_value=0)

    # Costruisci la griglia di destinazione e ottieni i nuovi valori
    target_coords = np.array(np.meshgrid(target_x, target_y, target_z, indexing='ij')).reshape(3, -1).T
    upsampled_mask = interpolator(target_coords)

    # Ristruttura l'array in base alla forma finale
    return upsampled_mask.reshape(target_shape)

def random_crop(mask, crop_size):
    max_shift_h = mask.shape[0] - crop_size[0]
    max_shift_w = mask.shape[1] - crop_size[1]
    max_shift_d = mask.shape[2] - crop_size[2]

    shift_h = np.random.randint(0, max_shift_h + 1)
    shift_w = np.random.randint(0, max_shift_w + 1)
    shift_d = np.random.randint(0, max_shift_d + 1)

    return mask[shift_h:shift_h + crop_size[0],
                shift_w:shift_w + crop_size[1],
                shift_d:shift_d + crop_size[2]]

import random

def generate_rise_masks_3d(N, H, W, D, h, w, d, p):
  # Step 1: Creazione maschere binarie più piccole
  masks = np.random.rand(N, h, w, d) < p  # Maschere di dimensione (N, h, w, d) binarie
  # Step 2: Upsampling delle maschere
  upsampled_masks = np.array([upsample_mask(mask, (H, W, D)) for mask in masks])
  # Step 3: Cropping e traslazione casuale
  cropped_masks = np.array([random_crop(mask, (H, W, D)) for mask in upsampled_masks])

  beta = random.choice([-1.0, +1.0])

  masks = cropped_masks * beta

  return masks

import copy

# Somma ad ogni time-step la maschera generata sul canale specificato

def perturb_instance(instance, masks, channel):
    masked = []

    # Itero su tutte le N maschere generate
    for mask in masks:
        masked_images = copy.deepcopy(instance)  # Copia profonda delle immagini originali

        # Perturba solo il canale specificato
        masked_images[..., channel] = np.add(
            masked_images[..., channel],
            mask )

        masked.append(masked_images)

    return masked

"""#### ***Prediction with Black-Box***"""

import tensorflow as tf

def ensemble_predict(models, images, x3_exp):
    # Se images è una lista, calcoliamo la lunghezza
    if isinstance(images, list):
        len_x3 = len(images)
    else:
        len_x3 = 1
        images = [images]  # Rendi images una lista con un solo elemento

    # Conversione in tensori
    Y_test = tf.stack([tf.convert_to_tensor(img, dtype=tf.float32) for img in images])
    Y_test_x3 = tf.tile(tf.expand_dims(tf.convert_to_tensor(x3_exp, dtype=tf.float32), axis=0), [len_x3, 1, 1])

    # Inizializza una lista per raccogliere le predizioni
    all_preds = []

    # Itera attraverso i modelli e raccogli le predizioni
    for model in models:
        preds = model.predict([Y_test, Y_test_x3], verbose=0)
        all_preds.append(preds)

    # Converte la lista di predizioni in un tensore di TensorFlow
    all_preds_tensor = tf.stack(all_preds)

    # Calcola la media lungo l'asse dei modelli (asse 0)
    mean_preds = tf.reduce_mean(all_preds_tensor, axis=0)

    return mean_preds.numpy()

"""#### ***Saliency Video***"""

def calculate_saliency_map(preds_array, masks):
    """
    Calcola la mappa di salienza media data una serie di predizioni e maschere.

    :param preds_array: Array di predizioni (numero di maschere x dimensioni predizione).
    :param masks: Array di maschere (numero di maschere x dimensioni maschera).
    :return: Mappa di salienza media.
    """
    sal = []
    for j in range(len(masks)):
        sal_i = preds_array[j] * np.abs(masks[j])
        sal.append(sal_i.reshape(-1, 5, 8))  # Adatta la shape secondo il formato orginiale dei frame

    # Rimuovere le dimensioni extra per fare np.mean lungo axis=0. masks ha shape (N,5,8,1)
    masks_squeezed = np.squeeze(np.abs(masks))
    # Ora calcola la media lungo l'asse 0
    ev_masks = np.mean(masks_squeezed, axis=0)

    sal = (1/ev_masks) * np.mean(sal, axis=0)

    return sal

"""#### ***Spatial-Temporal RISE: Algorithm***"""

def rise_spatial_temporal_explain(nr_instance, data_test_image, data_test_OHE, models, channel,
                                  p, H, W, D, h, w, d, N):

  #print(f"############### RISE-Spatial con h,w=({h},{w}), p={p} e N={N} ############################")

  instance    = copy.deepcopy(data_test_image[nr_instance])  # istanza da spiegare
  x3_instance = copy.deepcopy(data_test_OHE[nr_instance])    # One-Hot encode mesi dei frame dell'istanza

  masks = generate_rise_masks_3d(N, H, W, D, h, w, d, p)
  perturbed_instances = perturb_instance(instance, masks, channel)

  # Predizione originale
  pred_original = ensemble_predict(models, instance, x3_instance)
  # Predizioni su istanze perturbate
  preds_masked = ensemble_predict(models, perturbed_instances, x3_instance)

  # Differenza tra predizione originale e perturbata
  diff_pred = [abs(pred_original - pred_masked) for pred_masked in preds_masked]
  weights_array = np.concatenate(diff_pred, axis=0)

  saliency_video_i = calculate_saliency_map(weights_array, masks)

  return saliency_video_i

"""### ***Experiments***"""

from tqdm import tqdm

models = vott_lstm_models_loaded
channel_prec = 0

# Parametri
H, W, D = 104, 5, 8  # Dimensione dei frame (104 frame 5x8)
h, w, d = 8, 2, 4    # Dimensione maschera più piccola
N = 20000               # Numero di maschere
p = 0.2              # Probabilità di un pixel attivo

saliency_video_vott_test = []

for nr_instance, _ in enumerate(vottignasco_test_image):
  print(f"################### RISE-Spatial-Temporal Explanation for Vottingasco Test Instance nr {nr_instance} ##################################")

  saliency_video_i = rise_spatial_temporal_explain(nr_instance, vottignasco_test_image, vottingasco_test_OHE, models, channel_prec,
                                                   p, H, W, D, h, w, d, N)

  saliency_video_vott_test.append(saliency_video_i)

  print("######################################################################################## \n")

# SAVE
array_to_save = np.array(saliency_video_vott_test)
# Percorso completo del file di destinazione su Google Drive
file_dest_path = os.path.join(work_path, "Water_Resources/rise-video/XAI/spatial_temporal/results/saliency_video_vott_test.npy")
# Salva l'array NumPy come file .npy
np.save(file_dest_path, array_to_save)
