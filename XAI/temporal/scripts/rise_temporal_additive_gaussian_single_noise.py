# -*- coding: utf-8 -*-
"""rise_temporal_additive_gaussian_single_noise.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18jnTUFZcm87nVe804QXNCjFxQOkXA2RP
"""



"""### ***Cineca***"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras import activations
from tensorflow.keras.callbacks import TensorBoard
from tensorflow.keras.models import load_model
from keras import activations
import numpy as np

"""
##### ***Data & Black-Box***

"""

# IMPORTO I DATI PER VOTTIGNASCO
import os

# Ottieni il percorso effettivo da una variabile d'ambiente
work_path = os.environ['WORK']  # Ottieni il valore della variabile d'ambiente WORK
v_test_OHE_path = os.path.join(work_path, "Water_Resources/rise-video/data/Vottignasco/Vottignasco_00425010001_test_month_OHE.npy")
v_test_image_path = os.path.join(work_path, "Water_Resources/rise-video/data/Vottignasco/Vottignasco_00425010001_test_normalized_image_sequences.npy")
v_test_target_dates_path = os.path.join(work_path, "Water_Resources/rise-video/data/Vottignasco/Vottignasco_00425010001_test_target_dates.npy")

# Carica l'array numpy dai file
vottignasco_test_OHE    = np.load(v_test_OHE_path)
vottignasco_test_image  = np.load(v_test_image_path)
vottignasco_test_dates  = np.load(v_test_target_dates_path)


print(len(vottignasco_test_dates))
print(len(vottignasco_test_image))
print(len(vottignasco_test_OHE))

#print(vottingasco_test_OHE[0], "\n")
#print(vottignasco_test_image[0][0], "\n")

# """##### ***Black Boxes***"""

import os
import tensorflow as tf
from keras.models import load_model

# Se vuoi abilitare il dropout a runtime
mc_dropout = True

# Definizione della classe personalizzata doprout_custom
class doprout_custom(tf.keras.layers.SpatialDropout1D):
    def call(self, inputs, training=None):
        if mc_dropout:
            return super().call(inputs, training=True)
        else:
            return super().call(inputs, training=False)

# Percorso della directory su Cineca
base_dir = os.path.join(os.environ['WORK'], "Water_Resources/rise-video/trained_models/seq2val/Vottignasco")
lstm_suffix = 'time_dist_LSTM'

vott_lstm_models = []

def extract_index(filename):
    """Funzione per estrarre l'indice finale dal nome del file."""
    return int(filename.split('_LSTM_')[-1].split('.')[0])

# Trova tutti i file .keras nella cartella e li aggiunge alla lista
for filename in os.listdir(base_dir):
    if lstm_suffix in filename and filename.endswith(".keras"):
        vott_lstm_models.append(os.path.join(base_dir, filename))

# Ordina i modelli in base all'indice finale
vott_lstm_models = sorted(vott_lstm_models, key=lambda x: extract_index(os.path.basename(x)))

# Lista per i modelli caricati
vott_lstm_models_loaded = []

for i, model_lstm_path in enumerate(vott_lstm_models[:10]):  # Prendo i primi 10 modelli ordinati
    #print(f"Caricamento del modello LSTM {i+1}: {model_lstm_path}")

    # Carico il modello con la classe custom
    model = load_model(model_lstm_path, custom_objects={"doprout_custom": doprout_custom})

    # Aggiungo il modello alla lista
    vott_lstm_models_loaded.append(model)

print(vott_lstm_models_loaded)


"""### ***Temporal-RISE***"""

"""#### ***Prediction with Black-Box***"""

import tensorflow as tf

def ensemble_predict(models, images, x3_exp):
    # Se images è una lista, calcoliamo la lunghezza
    if isinstance(images, list):
        len_x3 = len(images)
    else:
        len_x3 = 1
        images = [images]  # Rendi images una lista con un solo elemento

    # Conversione in tensori
    Y_test = tf.stack([tf.convert_to_tensor(img, dtype=tf.float32) for img in images])
    Y_test_x3 = tf.tile(tf.expand_dims(tf.convert_to_tensor(x3_exp, dtype=tf.float32), axis=0), [len_x3, 1, 1])

    # Inizializza una lista per raccogliere le predizioni
    all_preds = []

    # Itera attraverso i modelli e raccogli le predizioni
    for model in models:
        preds = model.predict([Y_test, Y_test_x3], verbose=0)
        all_preds.append(preds)

    # Converte la lista di predizioni in un tensore di TensorFlow
    all_preds_tensor = tf.stack(all_preds)

    # Calcola la media lungo l'asse dei modelli (asse 0)
    mean_preds = tf.reduce_mean(all_preds_tensor, axis=0)

    return mean_preds.numpy()

"""#### ***Generation Masks (1D)***
Definisco delle funzione per ogni tipologia di rumore che stiamo testando:
* Rumore Uniforme (additivo)
* Rumore Gaussiano (additivo) con singolo centro
"""

import numpy as np
from tqdm import tqdm

# Esempio di funzione per generare la perturbazione gaussiana monodimensionale
def gaussian_perturbation(input_size, sigma, beta):
    x = np.arange(input_size)
    x_p = np.random.randint(0, input_size)

    perturbation = beta * np.exp(-0.5 * ((x - x_p)**2 / sigma**2))
    return perturbation

# Genera N masks gaussiane
def generate_masks_gaussian(N, input_size, seed, **kwargs):
  sigma_t = kwargs.get("sigma_t", 8.0)

  np.random.seed(seed)

  masks = np.empty((N, input_size))

  for i in tqdm(range(N), desc='Generating masks'):
    beta = np.random.choice([-1, 1])  # Fattore moltiplicativo per la perturbazione (può essere 1 o -1) -> +1 maschere positive, -1 maschere negative.
    perturbation = gaussian_perturbation(input_size, sigma_t, beta)
    masks[i] = perturbation

  return masks

# N = 5
# input_size = 104
# seed = 42

# sigma_t = 50

# masks = generate_masks_gaussian(N,input_size,seed, sigma_t=sigma_t)

# for nr_mask,mask in enumerate(masks):
#   plot_heatmap_vector(mask, f"Mask nr {nr_mask}")

"""#### ***Masks Application***"""

def temporal_additive_noise_onechannel(instance, masks, channel):
  masked = []

  for mask in masks:
    masked_images = copy.deepcopy(instance)
    for t,frame in enumerate(instance):
      masked_images[t][..., channel] = frame[..., channel] + mask[t]

    masked.append(masked_images)

  return masked

"""#### ***Saliency Map***"""

def calculate_saliency_map(weights_array, masks):
    """
    Calcola la mappa di salienza media data una serie di predizioni e maschere.

    :param weights_array: Array di predizioni (numero di maschere x dimensioni predizione).
    :param masks: Array di maschere (numero di maschere x dimensioni maschera).
    :return: Mappa di salienza media.
    """
    sal = []
    for j in range(len(masks)):
        sal_i = weights_array[j] * np.abs(masks[j])
        sal.append(sal_i)

    ev_masks = np.mean(np.abs(masks), axis=0)
    sal = (1/ev_masks) * np.mean(sal, axis=0)  # aggiunta della frazione 1/valore_atteso(maschere)
    return sal

"""#### ***Temporal-RISE: Framework***"""

def rise_temporal_explain(nr_instance, data_test_image, data_test_OHE, models, channel,
                         N, generate_masks_fn, seed, perturb_instance_fn, **kwargs):
  print(f"############### RISE-Temporal on Instance #{nr_instance} ###############")
  instance    = copy.deepcopy(data_test_image[nr_instance])
  x3_instance = copy.deepcopy(data_test_OHE[nr_instance])

  input_size = instance.shape[0] # Tempo

  masks = generate_masks_fn(N, input_size, seed, **kwargs)
  perturbed_instances = perturb_instance_fn(instance, masks, channel)

  # Predizione su Istanza Originale
  pred_original = ensemble_predict(models, instance, x3_instance)
  # Predizioni su Istanze Perturbate
  preds_masked = ensemble_predict(models, perturbed_instances, x3_instance)

  # Differenza tra predizione originale e perturbata
  diff_pred = [abs(pred_original - pred_masked) for pred_masked in preds_masked]
  weights_array = np.concatenate(diff_pred, axis=0)

  # Calcolo della mappa di salienza
  saliency_map_i = calculate_saliency_map(weights_array, masks)
  print("############### Processo completato. Mappa di salienza generata ###############")
  return saliency_map_i

"""#### ***Evaluation Metrics***"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error

def calculate_auc(x, y):
    """
    Calcola l'area sotto la curva (AUC) utilizzando il metodo del trapezio.

    :param x: Valori dell'asse x (frazione dei pixel inseriti).
    :param y: Valori dell'asse y (errori calcolati).
    :return: Area sotto la curva.
    """
    return np.trapz(y, x)

def calculate_auc_and_mean_errors(errors_all_dateset):
  mean_errors = np.mean(errors_all_dateset, axis=0)
  # Array x per il numero di superpixel inseriti
  x = np.arange(0, len(mean_errors))  # Array dinamico basato sulla lunghezza dei dati
  auc = calculate_auc(x, mean_errors)

  return auc,mean_errors

"""##### ***Insertion***"""

# Ho implementato anche qui l'approccio a batch per migliorare i tempi di exec

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error

def update_image_with_important_frame(image, initial_image, frame):
    """
    Aggiorna l'immagine inserendo i pixel più importanti.

    :param image: Immagine corrente.
    :param initial_image: Immagine originale.
    :param frame: nr di frame da inserire in image
    :return: Immagine aggiornata.
    """
    new_image = image.copy()
    new_image[frame] =+ initial_image[frame]
    return new_image


def insertion(models, original_images, x3, important_indices, initial_blurred_images, original_prediction):
    """
    Calcola la metrica di inserimento per una spiegazione data.

    :param models: Lista di modelli pre-addestrati.
    :param original_images: Immagine originale.
    :param x3: Codifica one-hot per la previsione.
    :param important_indices: Indici dei pixel in ordine di importanza.
    :param initial_blurred_images: Immagine iniziale con tutti i pixel a zero.
    :return: Lista degli errori ad ogni passo di inserimento.
    """

    # Predizione originale
    #original_prediction = ensemble_predict(models, original_images, x3)[0]
    #print("Original prediction:", original_prediction)

    # Lista per memorizzare le istanze a cui aggiungo frame mano a mano
    insertion_images = [initial_blurred_images]

    # Predizione sull'immagine iniziale (tutti i pixel a zero)
    I_prime = initial_blurred_images.copy()

    # Aggiungere gradualmente i frames più importanti. Ottengo una lista con tutte le img con i frame in maniera graduale
    for frame in important_indices:
        #print(frame)
        I_prime = update_image_with_important_frame(I_prime, original_images, frame)
        insertion_images.append(I_prime)

    # Calcolo le predizioni sulle istanze a cui ho aggiunto i frame in maniera graduale
    new_predictions = ensemble_predict(models, insertion_images, x3)
    # Rispetto ad ogni suddetta predizione, calcolo il MSE rispetto la pred sull'istanza originaria (come da test-set)
    errors = [mean_squared_error(original_prediction, masked_pred) for masked_pred in new_predictions[1:]]

    initial_error = mean_squared_error(original_prediction, new_predictions[0]) # mse immagine con tutti i frame blurrati
    print(f"Initial Prediction with ALL Blurred Frame, pred: {new_predictions[0]}, error: {initial_error}")
    only_inserted_frame_new_predictions = new_predictions[1:]
    for t, error in enumerate(errors):
      print(f"Frame {important_indices[t]}, new prediction: {only_inserted_frame_new_predictions[t]}, error: {error}")

    total_errors = [initial_error] + errors
    # Normalizzare la frazione di pixel inseriti
    x = np.linspace(0, 1, len(total_errors))
    print("len total erros: ", len(total_errors))

    # Calcolo dell'AUC
    auc = calculate_auc(x, total_errors)
    # print(f"Area under the curve (AUC): {auc}")

    # # Plot della curva dell'errore e area sotto la curva (AUC)
    # plt.plot(x, total_errors, label='Error curve')
    # plt.fill_between(x, total_errors, color='skyblue', alpha=0.4)
    # plt.text(x[-1] * 0.95, max(total_errors) * 0.9, f'AUC: {auc:.2f}',
    #      horizontalalignment='right')  # testo a destra
    # plt.xlabel('Fraction of frames inserted')
    # plt.ylabel('Mean Squared Error')
    # plt.title('Insertion Metric Curve')
    # plt.legend()
    # plt.show()

    return total_errors,auc

import numpy as np
import matplotlib.pyplot as plt

def plot_insertion_error_mean_curve(mean_errors):
    # Array x per il numero di superpixel inseriti
    x = np.arange(0, len(mean_errors))  # Array dinamico basato sulla lunghezza dei dati
    # Creazione del grafico
    plt.plot(x, mean_errors, label='Error Curve')
    # Pallini blu sui punti della curva
    plt.scatter(x, mean_errors, color='blue', zorder=3)
    # Area sotto la curva (AUC)
    plt.fill_between(x, mean_errors, color='skyblue', alpha=0.4)

    # Etichette degli assi
    plt.xlabel('Nr of SuperPixels inserted')
    plt.ylabel('Mean Squared Error')

    # Griglia e stile
    plt.grid(True, linestyle='--', alpha=0.6)
    # Titolo e legenda
    plt.title('Mean Insertion Metric Curve')
    plt.legend()

    # Visualizzazione del grafico
    plt.show()

"""##### ***Deletion***"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error

def update_image_by_removing_frame(image, important_indices, frame):
    """
    Aggiorna l'immagine rimuovendo i pixel più importanti.

    :param image: Immagine corrente.
    :param important_indices: Indici dei pixel importanti.
    :param frame: nr frame da rimuovere.
    :return: Immagine aggiornata.
    """
    new_image = image.copy()
    new_image[frame] = np.zeros((5, 8, 3))
    return new_image

def deletion(models, original_images, x3, important_indices, original_prediction):
    """
    Calcola la metrica di rimozione per una spiegazione data.

    :param models: Lista di modelli pre-addestrati.
    :param original_images: Immagine originale.
    :param x3: Codifica one-hot per la previsione.
    :param important_indices: Indici dei pixel in ordine di importanza.
    :return: Lista degli errori ad ogni passo di rimozione.
    """
    # Predizione originale
    #original_prediction = ensemble_predict(models, original_images, x3).flatten()
    #print("Original prediction:", original_prediction)

    # Lista per memorizzare le img a cui elimino gradualmente frames
    deletions_images = []

    # Inizializzazione
    I_prime = original_images.copy()

    # Rimuovere gradualmente i frames più importanti
    for frame in important_indices:
        I_prime = update_image_by_removing_frame(I_prime, important_indices, frame)
        deletions_images.append(I_prime)

    # Calcolo della predizione su tutte le img a cui rimuovo gradualmente in frames
    new_predictions = ensemble_predict(models, deletions_images, x3)
    # Calcolo del mse rispetto la predizione originale
    errors = [mean_squared_error(original_prediction, masked_pred) for masked_pred in new_predictions]

    initial_error = 0.0
    print(f"Initial Prediction with Original Images, prediction: {original_prediction}, error: {initial_error}")
    for t, error in enumerate(errors):
      print(f"Removed frame {important_indices[t]}, new prediction: {new_predictions[t]}, error: {error}")

    total_errors = [initial_error] + errors # Errore iniziale + errori su tutti i pixel rimossi

    # Normalizzare la frazione di pixel rimossi
    x = np.arange(len(total_errors)) / len(total_errors)

    # Calcolo dell'AUC
    auc = calculate_auc(x, total_errors)
    print(f"Area under the curve (AUC): {auc}")

    # # Plot della curva dell'errore e area sotto la curva (AUC)
    # plt.plot(x, total_errors, label='Error curve')
    # plt.fill_between(x, total_errors, color='lightcoral', alpha=0.4)
    # # Posiziona il testo AUC alla destra del titolo
    # plt.text(1.02, 1.02, f'AUC: {auc:.2f}',
    #      horizontalalignment='left',
    #      transform=plt.gca().transAxes,  # Coordinate rispetto all'asse (da 0 a 1)
    #      fontsize=11)
    # plt.xlabel('Fraction of frames removed')
    # plt.ylabel('Mean Squared Error')
    # plt.title('Deletion Metric Curve')
    # plt.legend()
    # plt.show()
    return total_errors,auc

import numpy as np
import matplotlib.pyplot as plt

def plot_deletion_error_mean_curve(mean_errors):
    # Array x per il numero di superpixel rimossi
    x = np.arange(0, len(mean_errors))  # Array dinamico basato sulla lunghezza dei dati
    # Creazione del grafico
    plt.plot(x, mean_errors, label='Error Curve')
    # Pallini rossi sui punti della curva
    plt.scatter(x, mean_errors, color='red', zorder=3)
    # Area sotto la curva (AUC)
    plt.fill_between(x, mean_errors, color='lightcoral', alpha=0.4)

    # Etichette degli assi
    plt.xlabel('Nr of SuperPixels removed')
    plt.ylabel('Mean Squared Error')
    # Griglia e stile
    plt.grid(True, linestyle='--', alpha=0.6)
    # Titolo e legenda
    plt.title('Deletion Mean Metric Curve')
    plt.legend()

    # Visualizzazione del grafico
    plt.show()

"""### ***Experiments***

"""#### ***Cineca: code for run***"""

import copy

channel_prec = 0
models = vott_lstm_models_loaded
seed = 42
T,H,W,C = (104,5,8,3)

N = 1000

sigma_t_values = [1,2,3,4,5,6,7,8,9,10,15,20,25,30,35,40,45,50,52]


stats_mean_insertion = []
stats_mean_deletion  = []

for sigma_t in sigma_t_values:
  print(f"####################### Experiment: sigma_t:{sigma_t} with N=1000 #######################")
  all_insertion_stats = []
  all_deletion_stats  = []

  for nr_instance,_ in enumerate(vottignasco_test_image):
    print(f"######### Instance #{nr_instance} with sigma_t:{sigma_t},N:{N}, generation of Saliency Vector for Prec, stats for Insertion/Deletion #########")
    saliency_vector = rise_temporal_explain(nr_instance, vottignasco_test_image, vottignasco_test_OHE, models, channel_prec,
                         N, generate_masks_gaussian, seed, temporal_additive_noise_onechannel, sigma_t=sigma_t)

    # Insertion
    initial_blurred_instance = np.zeros((T, H, W, C))
    all_important_pixels = np.argsort(-saliency_vector)[:]
    original_instance = copy.deepcopy(vottignasco_test_image[nr_instance])
    x3_instance = copy.deepcopy(vottignasco_test_OHE[nr_instance])

    original_prediction = ensemble_predict(models, original_instance, x3_instance)
    errors_insertion,auc_insertion = insertion(models, original_instance, x3_instance, all_important_pixels, initial_blurred_instance, original_prediction)

    # Deletion
    errors_deletion,auc_deletion   = deletion(models, original_instance, x3_instance, all_important_pixels, original_prediction)

    # Aggiungi la coppia [errors_insertion, auc_insertion] alla lista
    all_insertion_stats.append([errors_insertion, auc_insertion])
    # Coppia per la Deletion
    all_deletion_stats.append([errors_deletion, auc_deletion])
    print(f"###################### End Instance #{nr_instance} ######################")

  only_errors_insertion = [errors for errors,_ in all_insertion_stats]
  auc_insertion,mean_errors_insertion = calculate_auc_and_mean_errors(only_errors_insertion)
  stats_mean_insertion.append([auc_insertion,mean_errors_insertion])

  only_errors_deletion =  [errors for errors,_ in all_deletion_stats]
  auc_deletion,mean_errors_deletion = calculate_auc_and_mean_errors(only_errors_deletion)
  stats_mean_deletion.append([auc_deletion,mean_errors_deletion])

  print(f"############################ ALL Dataset #############################################")

import pandas as pd

df_stats_mean_insertion = pd.DataFrame(stats_mean_insertion, columns=['AUC', 'Mean Insertion Errors for each Frame'])
df_stats_mean_deletion  = pd.DataFrame(stats_mean_deletion,  columns=['AUC', 'Mean Deletion Errors for each Frame'])

df_stats_mean_insertion.to_csv(os.path.join(work_path, f"Water_Resources/rise-video/XAI/temporal/results/additive_gaussian_single_noise/all_stats_mean_insertion.csv"), index=False)
df_stats_mean_deletion.to_csv(os.path.join(work_path, f"Water_Resources/rise-video/XAI/temporal/results/additive_gaussian_single_noise/all_stats_mean_deletion.csv"),   index=False)
